openapi: 3.1.3
info:
  title: Snapgram - OpenAPI 3.0
  description: |-
    This is a sample Snapgram Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io).
    
    Some useful links:
    - [The Snapgram repository](https://github.com/naman09/Snapgram)
    - [The source API definition for the Snapgram]https://github.com/naman09/Snapgram/blob/master/backend/src/main/resources/openapi.yaml)
  version: 1.0.11
servers:
  - url: https://localhost:8080/api/v1
tags:
  - name: post
    description: Everything about your post
  - name: likes
    description: likes for posts by users
  - name: user
    description: user details
paths:
  /post:
    put:
      tags:
        - post
      summary: Update an existing post
      description: Update an existing post by Id
      operationId: updatePost
      requestBody:
        description: Update an existent post in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/xml:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid ID supplied
        '404':
          description: Post not found
        '422':
          description: Validation exception
      security:
        - poststore_auth:
            - write:posts
            - read:posts
    post:
      tags:
        - post
      summary: Add a new post
      description: Add a new post
      operationId: addPost
      requestBody:
        description: Create a new post in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/xml:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - poststore_auth:
            - write:posts
            - read:posts
  /post/findByStatus:
    get:
      tags:
        - post
      summary: Finds Posts by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPostsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          description: Invalid status value
      security:
        - poststore_auth:
            - write:posts
            - read:posts
  /post/findByTags:
    get:
      tags:
        - post
      summary: Finds Posts by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPostsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          description: Invalid tag value
      security:
        - poststore_auth:
            - write:posts
            - read:posts
  /post/{postId}:
    get:
      tags:
        - post
      summary: Find post by ID
      description: Returns a single post
      operationId: getPostById
      parameters:
        - name: postId
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid ID supplied
        '404':
          description: Post not found
      security:
        - api_key: []
        - poststore_auth:
            - write:posts
            - read:posts
    post:
      tags:
        - post
      summary: Updates a post in the store with form data
      description: ''
      operationId: updatePostWithForm
      parameters:
        - name: postId
          in: path
          description: ID of post that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of post that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of post that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
      security:
        - poststore_auth:
            - write:posts
            - read:posts
    delete:
      tags:
        - post
      summary: Deletes a post
      description: delete a post
      operationId: deletePost
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: postId
          in: path
          description: Post id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid post value
      security:
        - poststore_auth:
            - write:posts
            - read:posts
  /post/{postId}/uploadImage:
    post:
      tags:
        - post
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: postId
          in: path
          description: ID of post to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - poststore_auth:
            - write:posts
            - read:posts
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 10
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
      xml:
        name: user
    Post:
      type: object
      properties:
        id:
          type: string
          example: 10
        userId:
          type: string
          example: 123
        mediaUrl:
          type: string
          example: https://s3-bucket-1/obj-1/key-1
        location:
          type: string
          example: 123
        tags:
          type: array
          items:
            type: string
          example: ["123", "213"]
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Post:
      description: Post object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
        application/xml:
          schema:
            $ref: '#components/schemas/Post'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    poststore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://poststore3.swagger.io/oauth/authorize
          scopes:
            write:posts: modify posts in your account
            read:posts: read your posts
    api_key:
      type: apiKey
      name: api_key
      in: header